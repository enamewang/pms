/***********************************************************
 ** File Name : PmsMinhead.cs
 ** Copyright (C) 2012 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Ename.Wang
 ** Create Date : 2012-06-21
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PmsMinHead
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private string m_Vid; 
		private string m_PmsId; 
		private string m_Mnid; 
		private int m_MeetingType; 
		private string m_Host; 
		private string m_Venue; 
		private string m_Recorder; 
		private DateTime m_StartTime; 
		private DateTime m_EndTime; 
		private string m_Subject; 
		private string m_Attendee; 
		private string m_Creator; 
		private DateTime m_CreateDate;
        private string m_CrId;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PmsMinHead()
		{
			m_Vid = null; 
			m_PmsId = null; 
			m_Mnid = null; 
			m_MeetingType = 0; 
			m_Host = null; 
			m_Venue = null; 
			m_Recorder = null; 
			m_StartTime = new DateTime(); 
			m_EndTime = new DateTime(); 
			m_Subject = null; 
			m_Attendee = null; 
			m_Creator = null; 
			m_CreateDate = new DateTime();
            m_CrId = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public string Vid
		{
			get { return m_Vid; }
			set	
			{
				if( value!= null && value.Length > 2)
					throw new ArgumentOutOfRangeException("Invalid value for Vid", value, value.ToString());
				
				m_IsChanged |= (m_Vid != value); m_Vid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string PmsId
		{
			get { return m_PmsId; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for PmsId", value, value.ToString());
				
				m_IsChanged |= (m_PmsId != value); m_PmsId = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Mnid
		{
			get { return m_Mnid; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for Mnid", value, value.ToString());
				
				m_IsChanged |= (m_Mnid != value); m_Mnid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int MeetingType
		{
			get { return m_MeetingType; }
			set { m_IsChanged |= (m_MeetingType != value); m_MeetingType = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Host
		{
			get { return m_Host; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Host", value, value.ToString());
				
				m_IsChanged |= (m_Host != value); m_Host = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Venue
		{
			get { return m_Venue; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Venue", value, value.ToString());
				
				m_IsChanged |= (m_Venue != value); m_Venue = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Recorder
		{
			get { return m_Recorder; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Recorder", value, value.ToString());
				
				m_IsChanged |= (m_Recorder != value); m_Recorder = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime StartTime
		{
			get { return m_StartTime; }
			set { m_IsChanged |= (m_StartTime != value); m_StartTime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime EndTime
		{
			get { return m_EndTime; }
			set { m_IsChanged |= (m_EndTime != value); m_EndTime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Subject
		{
			get { return m_Subject; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Subject", value, value.ToString());
				
				m_IsChanged |= (m_Subject != value); m_Subject = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Attendee
		{
			get { return m_Attendee; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Attendee", value, value.ToString());
				
				m_IsChanged |= (m_Attendee != value); m_Attendee = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Creator
		{
			get { return m_Creator; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Creator", value, value.ToString());
				
				m_IsChanged |= (m_Creator != value); m_Creator = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateDate
		{
			get { return m_CreateDate; }
			set { m_IsChanged |= (m_CreateDate != value); m_CreateDate = value; }
		}

        /// <summary>
        /// 
        /// </summary>		
        public string CrId
        {
            get { return m_CrId; }
            set { m_IsChanged |= (m_CrId != value); m_CrId = value; }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
