/***********************************************************
 ** File Name : PmsRequirement.cs
 ** Copyright (C) 2013 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Ename.Wang
 ** Create Date : 2013-02-08
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PmsRequirement
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_Serial; 
		private string m_Vid; 
		private string m_YearAndMonth; 
		private string m_RequirementPeriod; 
		private string m_UserDept; 
		private string m_CrId; 
		private string m_CrName; 
		private string m_Type; 
		private string m_System; 
		private string m_Pm; 
		private string m_Sd; 
		private string m_Se; 
		private string m_Qa; 
		private string m_Status; 
		private string m_Rerver1; 
		private string m_Rerver2; 
		private string m_Rerver3; 
		private string m_Rerver4; 
		private string m_Rerver5; 
		private DateTime m_Createdate; 
		private string m_Createuser; 
		private DateTime m_Maintaindate; 
		private string m_Maintainuser; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PmsRequirement()
		{
			m_Serial = 0; 
			m_Vid = null; 
			m_YearAndMonth = null; 
			m_RequirementPeriod = null; 
			m_UserDept = null; 
			m_CrId = null; 
			m_CrName = null; 
			m_Type = null; 
			m_System = null; 
			m_Pm = null;
            m_Sd = string.Empty;
            m_Se = string.Empty; 
			m_Qa = string.Empty; 
			m_Status = null; 
			m_Rerver1 = null; 
			m_Rerver2 = null; 
			m_Rerver3 = null; 
			m_Rerver4 = null; 
			m_Rerver5 = null; 
			m_Createdate = new DateTime(); 
			m_Createuser = null; 
			m_Maintaindate = new DateTime(); 
			m_Maintainuser = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int Serial
		{
			get { return m_Serial; }
			set { m_IsChanged |= (m_Serial != value); m_Serial = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Vid
		{
			get { return m_Vid; }
			set	
			{
				if( value!= null && value.Length > 2)
					throw new ArgumentOutOfRangeException("Invalid value for Vid", value, value.ToString());
				
				m_IsChanged |= (m_Vid != value); m_Vid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string YearAndMonth
		{
			get { return m_YearAndMonth; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for YearAndMonth", value, value.ToString());
				
				m_IsChanged |= (m_YearAndMonth != value); m_YearAndMonth = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RequirementPeriod
		{
			get { return m_RequirementPeriod; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RequirementPeriod", value, value.ToString());
				
				m_IsChanged |= (m_RequirementPeriod != value); m_RequirementPeriod = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UserDept
		{
			get { return m_UserDept; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for UserDept", value, value.ToString());
				
				m_IsChanged |= (m_UserDept != value); m_UserDept = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CrId
		{
			get { return m_CrId; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CrId", value, value.ToString());
				
				m_IsChanged |= (m_CrId != value); m_CrId = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CrName
		{
			get { return m_CrName; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for CrName", value, value.ToString());
				
				m_IsChanged |= (m_CrName != value); m_CrName = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Type
		{
			get { return m_Type; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				m_IsChanged |= (m_Type != value); m_Type = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string System
		{
			get { return m_System; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for System", value, value.ToString());
				
				m_IsChanged |= (m_System != value); m_System = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Pm
		{
			get { return m_Pm; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Pm", value, value.ToString());
				
				m_IsChanged |= (m_Pm != value); m_Pm = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Sd
		{
			get { return m_Sd; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Sd", value, value.ToString());
				
				m_IsChanged |= (m_Sd != value); m_Sd = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Se
		{
			get { return m_Se; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Se", value, value.ToString());
				
				m_IsChanged |= (m_Se != value); m_Se = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Qa
		{
			get { return m_Qa; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Qa", value, value.ToString());
				
				m_IsChanged |= (m_Qa != value); m_Qa = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return m_Status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				m_IsChanged |= (m_Status != value); m_Status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rerver1
		{
			get { return m_Rerver1; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Rerver1", value, value.ToString());
				
				m_IsChanged |= (m_Rerver1 != value); m_Rerver1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rerver2
		{
			get { return m_Rerver2; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Rerver2", value, value.ToString());
				
				m_IsChanged |= (m_Rerver2 != value); m_Rerver2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rerver3
		{
			get { return m_Rerver3; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Rerver3", value, value.ToString());
				
				m_IsChanged |= (m_Rerver3 != value); m_Rerver3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rerver4
		{
			get { return m_Rerver4; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Rerver4", value, value.ToString());
				
				m_IsChanged |= (m_Rerver4 != value); m_Rerver4 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Rerver5
		{
			get { return m_Rerver5; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Rerver5", value, value.ToString());
				
				m_IsChanged |= (m_Rerver5 != value); m_Rerver5 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Createdate
		{
			get { return m_Createdate; }
			set { m_IsChanged |= (m_Createdate != value); m_Createdate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Createuser
		{
			get { return m_Createuser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Createuser", value, value.ToString());
				
				m_IsChanged |= (m_Createuser != value); m_Createuser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Maintaindate
		{
			get { return m_Maintaindate; }
			set { m_IsChanged |= (m_Maintaindate != value); m_Maintaindate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Maintainuser
		{
			get { return m_Maintainuser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Maintainuser", value, value.ToString());
				
				m_IsChanged |= (m_Maintainuser != value); m_Maintainuser = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
