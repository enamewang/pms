/***********************************************************
 ** File Name : BfResultinfo.cs
 ** Copyright (C) 2011 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Kite.Zhang
 ** Create Date : 2011-08-26
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class BfResultinfo
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_Resultid; 
		private short m_Projectid; 
		private string m_ProjectName; 
		private short m_Moduleid; 
		private string m_ModulePath; 
		private int m_Caseid; 
		private string m_ResultTitle; 
		private string m_ResultValue; 
		private string m_ResultStatus; 
		private string m_MailTo; 
		private string m_OpenedBy; 
		private DateTime m_OpenedDate; 
		private string m_ResultSteps; 
		private string m_AssignedTo; 
		private DateTime m_AssignedDate; 
		private string m_LastEditedBy; 
		private DateTime m_LastEditedDate; 
		private string m_ModifiedBy; 
		private string m_Resultos; 
		private string m_ResultBrowser; 
		private string m_ResultMachine; 
		private string m_ResultBuild; 
		private string m_ResultKeyword; 
		private string m_Bugid; 
		private string m_CustomField1; 
		private string m_CustomField2; 
		private string m_CustomField3; 
		private string m_IsDroped; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public BfResultinfo()
		{
			m_Resultid = 0; 
			m_Projectid = 0; 
			m_ProjectName = null; 
			m_Moduleid = 0; 
			m_ModulePath = null; 
			m_Caseid = 0; 
			m_ResultTitle = null; 
			m_ResultValue = null; 
			m_ResultStatus = null; 
			m_MailTo = null; 
			m_OpenedBy = null; 
			m_OpenedDate = new DateTime(); 
			m_ResultSteps = null; 
			m_AssignedTo = null; 
			m_AssignedDate = new DateTime(); 
			m_LastEditedBy = null; 
			m_LastEditedDate = new DateTime(); 
			m_ModifiedBy = null; 
			m_Resultos = null; 
			m_ResultBrowser = null; 
			m_ResultMachine = null; 
			m_ResultBuild = null; 
			m_ResultKeyword = null; 
			m_Bugid = null; 
			m_CustomField1 = null; 
			m_CustomField2 = null; 
			m_CustomField3 = null; 
			m_IsDroped = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int Resultid
		{
			get { return m_Resultid; }
			set { m_IsChanged |= (m_Resultid != value); m_Resultid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public short Projectid
		{
			get { return m_Projectid; }
			set { m_IsChanged |= (m_Projectid != value); m_Projectid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ProjectName
		{
			get { return m_ProjectName; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ProjectName", value, value.ToString());
				
				m_IsChanged |= (m_ProjectName != value); m_ProjectName = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public short Moduleid
		{
			get { return m_Moduleid; }
			set { m_IsChanged |= (m_Moduleid != value); m_Moduleid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModulePath
		{
			get { return m_ModulePath; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for ModulePath", value, value.ToString());
				
				m_IsChanged |= (m_ModulePath != value); m_ModulePath = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int Caseid
		{
			get { return m_Caseid; }
			set { m_IsChanged |= (m_Caseid != value); m_Caseid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultTitle
		{
			get { return m_ResultTitle; }
			set	
			{
				if( value!= null && value.Length > 150)
					throw new ArgumentOutOfRangeException("Invalid value for ResultTitle", value, value.ToString());
				
				m_IsChanged |= (m_ResultTitle != value); m_ResultTitle = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultValue
		{
			get { return m_ResultValue; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for ResultValue", value, value.ToString());
				
				m_IsChanged |= (m_ResultValue != value); m_ResultValue = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultStatus
		{
			get { return m_ResultStatus; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for ResultStatus", value, value.ToString());
				
				m_IsChanged |= (m_ResultStatus != value); m_ResultStatus = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MailTo
		{
			get { return m_MailTo; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for MailTo", value, value.ToString());
				
				m_IsChanged |= (m_MailTo != value); m_MailTo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OpenedBy
		{
			get { return m_OpenedBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for OpenedBy", value, value.ToString());
				
				m_IsChanged |= (m_OpenedBy != value); m_OpenedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime OpenedDate
		{
			get { return m_OpenedDate; }
			set { m_IsChanged |= (m_OpenedDate != value); m_OpenedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultSteps
		{
			get { return m_ResultSteps; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for ResultSteps", value, value.ToString());
				
				m_IsChanged |= (m_ResultSteps != value); m_ResultSteps = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AssignedTo
		{
			get { return m_AssignedTo; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for AssignedTo", value, value.ToString());
				
				m_IsChanged |= (m_AssignedTo != value); m_AssignedTo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime AssignedDate
		{
			get { return m_AssignedDate; }
			set { m_IsChanged |= (m_AssignedDate != value); m_AssignedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LastEditedBy
		{
			get { return m_LastEditedBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for LastEditedBy", value, value.ToString());
				
				m_IsChanged |= (m_LastEditedBy != value); m_LastEditedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime LastEditedDate
		{
			get { return m_LastEditedDate; }
			set { m_IsChanged |= (m_LastEditedDate != value); m_LastEditedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModifiedBy
		{
			get { return m_ModifiedBy; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for ModifiedBy", value, value.ToString());
				
				m_IsChanged |= (m_ModifiedBy != value); m_ModifiedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Resultos
		{
			get { return m_Resultos; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Resultos", value, value.ToString());
				
				m_IsChanged |= (m_Resultos != value); m_Resultos = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultBrowser
		{
			get { return m_ResultBrowser; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ResultBrowser", value, value.ToString());
				
				m_IsChanged |= (m_ResultBrowser != value); m_ResultBrowser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultMachine
		{
			get { return m_ResultMachine; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for ResultMachine", value, value.ToString());
				
				m_IsChanged |= (m_ResultMachine != value); m_ResultMachine = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultBuild
		{
			get { return m_ResultBuild; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for ResultBuild", value, value.ToString());
				
				m_IsChanged |= (m_ResultBuild != value); m_ResultBuild = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResultKeyword
		{
			get { return m_ResultKeyword; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for ResultKeyword", value, value.ToString());
				
				m_IsChanged |= (m_ResultKeyword != value); m_ResultKeyword = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Bugid
		{
			get { return m_Bugid; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Bugid", value, value.ToString());
				
				m_IsChanged |= (m_Bugid != value); m_Bugid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomField1
		{
			get { return m_CustomField1; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for CustomField1", value, value.ToString());
				
				m_IsChanged |= (m_CustomField1 != value); m_CustomField1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomField2
		{
			get { return m_CustomField2; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for CustomField2", value, value.ToString());
				
				m_IsChanged |= (m_CustomField2 != value); m_CustomField2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomField3
		{
			get { return m_CustomField3; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for CustomField3", value, value.ToString());
				
				m_IsChanged |= (m_CustomField3 != value); m_CustomField3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string IsDroped
		{
			get { return m_IsDroped; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for IsDroped", value, value.ToString());
				
				m_IsChanged |= (m_IsDroped != value); m_IsDroped = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
