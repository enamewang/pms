/***********************************************************
 ** File Name : BaseDataDepartmentUser.cs
 ** Copyright (C) 2013 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Justin.Meng
 ** Create Date : 2013-12-02
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class BaseDataDepartmentUser
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_DepartmentId; 
		private int m_UserId; 
		private string m_Type; 
		private string m_Active; 
		private DateTime m_CreateDate; 
		private string m_CreateUser; 
		private DateTime m_MaintainDate; 
		private string m_MaintainUser; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public BaseDataDepartmentUser()
		{
			m_DepartmentId = 0; 
			m_UserId = 0; 
			m_Type = null; 
			m_Active = null; 
			m_CreateDate = new DateTime(); 
			m_CreateUser = null; 
			m_MaintainDate = new DateTime(); 
			m_MaintainUser = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int DepartmentId
		{
			get { return m_DepartmentId; }
			set { m_IsChanged |= (m_DepartmentId != value); m_DepartmentId = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int UserId
		{
			get { return m_UserId; }
			set { m_IsChanged |= (m_UserId != value); m_UserId = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Type
		{
			get { return m_Type; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				m_IsChanged |= (m_Type != value); m_Type = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Active
		{
			get { return m_Active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				m_IsChanged |= (m_Active != value); m_Active = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateDate
		{
			get { return m_CreateDate; }
			set { m_IsChanged |= (m_CreateDate != value); m_CreateDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return m_CreateUser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());
				
				m_IsChanged |= (m_CreateUser != value); m_CreateUser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime MaintainDate
		{
			get { return m_MaintainDate; }
			set { m_IsChanged |= (m_MaintainDate != value); m_MaintainDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MaintainUser
		{
			get { return m_MaintainUser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for MaintainUser", value, value.ToString());
				
				m_IsChanged |= (m_MaintainUser != value); m_MaintainUser = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
