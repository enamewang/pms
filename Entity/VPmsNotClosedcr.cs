/***********************************************************
 ** File Name : VPmsNotClosedcr.cs
 ** Copyright (C) 2012 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Tim.Zhang
 ** Create Date : 2012-09-29
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class VPmsNotClosedcr
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private string m_Crid; 
		private string m_Pmsid; 
		private string m_Type; 
		private string m_Pmsname; 
		private string m_Releasedate; 
		private string m_System; 
		private string m_Pm; 
		private string m_Dept; 
		private string m_Sd; 
		private float m_Cost; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public VPmsNotClosedcr()
		{
			m_Crid = null; 
			m_Pmsid = null; 
			m_Type = null; 
			m_Pmsname = null; 
			m_Releasedate = null; 
			m_System = null; 
			m_Pm = null; 
			m_Dept = null; 
			m_Sd = null; 
			m_Cost = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public string Crid
		{
			get { return m_Crid; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Crid", value, value.ToString());
				
				m_IsChanged |= (m_Crid != value); m_Crid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Pmsid
		{
			get { return m_Pmsid; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for Pmsid", value, value.ToString());
				
				m_IsChanged |= (m_Pmsid != value); m_Pmsid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Type
		{
			get { return m_Type; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				m_IsChanged |= (m_Type != value); m_Type = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Pmsname
		{
			get { return m_Pmsname; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Pmsname", value, value.ToString());
				
				m_IsChanged |= (m_Pmsname != value); m_Pmsname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Releasedate
		{
			get { return m_Releasedate; }
			set	
			{
				if( value!= null && value.Length > 8)
					throw new ArgumentOutOfRangeException("Invalid value for Releasedate", value, value.ToString());
				
				m_IsChanged |= (m_Releasedate != value); m_Releasedate = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string System
		{
			get { return m_System; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for System", value, value.ToString());
				
				m_IsChanged |= (m_System != value); m_System = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Pm
		{
			get { return m_Pm; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Pm", value, value.ToString());
				
				m_IsChanged |= (m_Pm != value); m_Pm = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Dept
		{
			get { return m_Dept; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Dept", value, value.ToString());
				
				m_IsChanged |= (m_Dept != value); m_Dept = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Sd
		{
			get { return m_Sd; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Sd", value, value.ToString());
				
				m_IsChanged |= (m_Sd != value); m_Sd = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float Cost
		{
			get { return m_Cost; }
			set { m_IsChanged |= (m_Cost != value); m_Cost = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
