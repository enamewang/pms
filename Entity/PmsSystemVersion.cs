/***********************************************************
 ** File Name : PmsSystemVersion.cs
 ** Copyright (C) 2011 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Kite.Zhang
 ** Create Date : 2011-09-05
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PmsSystemVersion
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_Serial; 
		private string m_Vid; 
		private string m_TeamDomain; 
		private string m_SystemDomain; 
		private string m_Site; 
		private string m_System; 
		private string m_OldVersion; 
		private string m_NewVersion; 
		private string m_BugFreeProject; 
		private string m_BugFreeModule; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PmsSystemVersion()
		{
			m_Serial = 0; 
			m_Vid = null; 
			m_TeamDomain = null; 
			m_SystemDomain = null; 
			m_Site = null; 
			m_System = null; 
			m_OldVersion = null; 
			m_NewVersion = null; 
			m_BugFreeProject = null; 
			m_BugFreeModule = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int Serial
		{
			get { return m_Serial; }
			set { m_IsChanged |= (m_Serial != value); m_Serial = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Vid
		{
			get { return m_Vid; }
			set	
			{
				if( value!= null && value.Length > 2)
					throw new ArgumentOutOfRangeException("Invalid value for Vid", value, value.ToString());
				
				m_IsChanged |= (m_Vid != value); m_Vid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TeamDomain
		{
			get { return m_TeamDomain; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for TeamDomain", value, value.ToString());
				
				m_IsChanged |= (m_TeamDomain != value); m_TeamDomain = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemDomain
		{
			get { return m_SystemDomain; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for SystemDomain", value, value.ToString());
				
				m_IsChanged |= (m_SystemDomain != value); m_SystemDomain = value;
			}
		}
			
		/// <summary>
		/// Site
		/// </summary>		
		public string Site
		{
			get { return m_Site; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Site", value, value.ToString());
				
				m_IsChanged |= (m_Site != value); m_Site = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string System
		{
			get { return m_System; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for System", value, value.ToString());
				
				m_IsChanged |= (m_System != value); m_System = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OldVersion
		{
			get { return m_OldVersion; }
			set	
			{
				if( value!= null && value.Length > 12)
					throw new ArgumentOutOfRangeException("Invalid value for OldVersion", value, value.ToString());
				
				m_IsChanged |= (m_OldVersion != value); m_OldVersion = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string NewVersion
		{
			get { return m_NewVersion; }
			set	
			{
				if( value!= null && value.Length > 12)
					throw new ArgumentOutOfRangeException("Invalid value for NewVersion", value, value.ToString());
				
				m_IsChanged |= (m_NewVersion != value); m_NewVersion = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugFreeProject
		{
			get { return m_BugFreeProject; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for BugFreeProject", value, value.ToString());
				
				m_IsChanged |= (m_BugFreeProject != value); m_BugFreeProject = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugFreeModule
		{
			get { return m_BugFreeModule; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for BugFreeModule", value, value.ToString());
				
				m_IsChanged |= (m_BugFreeModule != value); m_BugFreeModule = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
