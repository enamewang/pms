/***********************************************************
 ** File Name : VTfsDoc.cs
 ** Copyright (C) 2014 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Ename.Wang
 ** Create Date : 2014-02-21
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class VTfsDoc
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private string m_User; 
		private string m_Dirname; 
		private string m_FileName; 
		private string m_FileUrl; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public VTfsDoc()
		{
			m_User = null; 
			m_Dirname = null; 
			m_FileName = null; 
			m_FileUrl = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public string User
		{
			get { return m_User; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for User", value, value.ToString());
				
				m_IsChanged |= (m_User != value); m_User = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Dirname
		{
			get { return m_Dirname; }
			set	
			{
				if( value!= null && value.Length > 256)
					throw new ArgumentOutOfRangeException("Invalid value for Dirname", value, value.ToString());
				
				m_IsChanged |= (m_Dirname != value); m_Dirname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FileName
		{
			get { return m_FileName; }
			set	
			{
				if( value!= null && value.Length > 128)
					throw new ArgumentOutOfRangeException("Invalid value for FileName", value, value.ToString());
				
				m_IsChanged |= (m_FileName != value); m_FileName = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FileUrl
		{
			get { return m_FileUrl; }
			set	
			{
				if( value!= null && value.Length > 414)
					throw new ArgumentOutOfRangeException("Invalid value for FileUrl", value, value.ToString());
				
				m_IsChanged |= (m_FileUrl != value); m_FileUrl = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
