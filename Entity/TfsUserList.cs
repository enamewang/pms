/***********************************************************
 ** File Name : TfsUserList.cs
 ** Copyright (C) 2013 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Justin.Meng
 ** Create Date : 2013-12-28
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class TfsUserList
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_Userid; 
		private string m_UserEmpNo; 
		private string m_Domain; 
		private string m_UserName; 
		private string m_MailAddress; 
		private string m_Password; 
		private string m_LoginName; 
		private int m_Groupid; 
		private int m_Teamid; 
		private string m_Active; 
		private string m_NeedDirectiveApproved; 
		private string m_Needaic1Approved; 
		private DateTime m_CreateDate; 
		private string m_CreateUser; 
		private DateTime m_MaintainDate; 
		private string m_MaintainUser; 
		private string m_ExtNo; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public TfsUserList()
		{
			m_Userid = 0; 
			m_UserEmpNo = null; 
			m_Domain = null; 
			m_UserName = null; 
			m_MailAddress = null; 
			m_Password = null; 
			m_LoginName = null; 
			m_Groupid = 0; 
			m_Teamid = 0; 
			m_Active = null; 
			m_NeedDirectiveApproved = null; 
			m_Needaic1Approved = null; 
			m_CreateDate = new DateTime(); 
			m_CreateUser = null; 
			m_MaintainDate = new DateTime(); 
			m_MaintainUser = null; 
			m_ExtNo = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int Userid
		{
			get { return m_Userid; }
			set { m_IsChanged |= (m_Userid != value); m_Userid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UserEmpNo
		{
			get { return m_UserEmpNo; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for UserEmpNo", value, value.ToString());
				
				m_IsChanged |= (m_UserEmpNo != value); m_UserEmpNo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Domain
		{
			get { return m_Domain; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Domain", value, value.ToString());
				
				m_IsChanged |= (m_Domain != value); m_Domain = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UserName
		{
			get { return m_UserName; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UserName", value, value.ToString());
				
				m_IsChanged |= (m_UserName != value); m_UserName = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MailAddress
		{
			get { return m_MailAddress; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for MailAddress", value, value.ToString());
				
				m_IsChanged |= (m_MailAddress != value); m_MailAddress = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Password
		{
			get { return m_Password; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());
				
				m_IsChanged |= (m_Password != value); m_Password = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LoginName
		{
			get { return m_LoginName; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LoginName", value, value.ToString());
				
				m_IsChanged |= (m_LoginName != value); m_LoginName = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int Groupid
		{
			get { return m_Groupid; }
			set { m_IsChanged |= (m_Groupid != value); m_Groupid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int Teamid
		{
			get { return m_Teamid; }
			set { m_IsChanged |= (m_Teamid != value); m_Teamid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Active
		{
			get { return m_Active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				m_IsChanged |= (m_Active != value); m_Active = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string NeedDirectiveApproved
		{
			get { return m_NeedDirectiveApproved; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for NeedDirectiveApproved", value, value.ToString());
				
				m_IsChanged |= (m_NeedDirectiveApproved != value); m_NeedDirectiveApproved = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Needaic1Approved
		{
			get { return m_Needaic1Approved; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Needaic1Approved", value, value.ToString());
				
				m_IsChanged |= (m_Needaic1Approved != value); m_Needaic1Approved = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateDate
		{
			get { return m_CreateDate; }
			set { m_IsChanged |= (m_CreateDate != value); m_CreateDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return m_CreateUser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());
				
				m_IsChanged |= (m_CreateUser != value); m_CreateUser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime MaintainDate
		{
			get { return m_MaintainDate; }
			set { m_IsChanged |= (m_MaintainDate != value); m_MaintainDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MaintainUser
		{
			get { return m_MaintainUser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for MaintainUser", value, value.ToString());
				
				m_IsChanged |= (m_MaintainUser != value); m_MaintainUser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ExtNo
		{
			get { return m_ExtNo; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ExtNo", value, value.ToString());
				
				m_IsChanged |= (m_ExtNo != value); m_ExtNo = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
