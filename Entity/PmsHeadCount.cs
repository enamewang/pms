/***********************************************************
 ** File Name : PmsHeadCount.cs
 ** Copyright (C) 2013 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Ename.Wang
 ** Create Date : 2013-02-21
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PmsHeadCount
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private string m_Vid; 
		private string m_YearAndMonth; 
		private string m_RequirementPeriod; 
		private string m_UserDept; 
		private string m_Role; 
		private float m_HeadCount; 
		private DateTime m_Createdate; 
		private string m_Createuser; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PmsHeadCount()
		{
			m_Vid = null; 
			m_YearAndMonth = null; 
			m_RequirementPeriod = null; 
			m_UserDept = null; 
			m_Role = null; 
			m_HeadCount = 0; 
			m_Createdate = new DateTime(); 
			m_Createuser = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public string Vid
		{
			get { return m_Vid; }
			set	
			{
				if( value!= null && value.Length > 2)
					throw new ArgumentOutOfRangeException("Invalid value for Vid", value, value.ToString());
				
				m_IsChanged |= (m_Vid != value); m_Vid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string YearAndMonth
		{
			get { return m_YearAndMonth; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for YearAndMonth", value, value.ToString());
				
				m_IsChanged |= (m_YearAndMonth != value); m_YearAndMonth = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RequirementPeriod
		{
			get { return m_RequirementPeriod; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RequirementPeriod", value, value.ToString());
				
				m_IsChanged |= (m_RequirementPeriod != value); m_RequirementPeriod = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UserDept
		{
			get { return m_UserDept; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for UserDept", value, value.ToString());
				
				m_IsChanged |= (m_UserDept != value); m_UserDept = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Role
		{
			get { return m_Role; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Role", value, value.ToString());
				
				m_IsChanged |= (m_Role != value); m_Role = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float HeadCount
		{
			get { return m_HeadCount; }
			set { m_IsChanged |= (m_HeadCount != value); m_HeadCount = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Createdate
		{
			get { return m_Createdate; }
			set { m_IsChanged |= (m_Createdate != value); m_Createdate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Createuser
		{
			get { return m_Createuser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Createuser", value, value.ToString());
				
				m_IsChanged |= (m_Createuser != value); m_Createuser = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
