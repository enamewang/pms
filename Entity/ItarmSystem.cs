/***********************************************************
 ** File Name : ItarmSystem.cs
 ** Copyright (C) 2011 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Kite.Zhang
 ** Create Date : 2011-08-08
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class ItarmSystem
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_SystemId; 
		private string m_SystemDomain; 
		private string m_SystemBname; 
		private string m_SystemEname; 
		private string m_SystemCname; 
		private string m_SystemDescription; 
		private string m_Active; 
		private string m_Remark; 
		private string m_Site; 
		private string m_GlobalReviewer; 
		private string m_GlobalAdmin; 
		private string m_DocumentPath; 
		private string m_TypeInPortal; 
		private string m_SystemLink; 
		private string m_SitePortal;

        private string m_EnglishName;
        private string m_Extension;
        private string m_PmNo;
        private int m_Sequence;
        //private string m_LeaderNo; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ItarmSystem()
		{
			m_SystemId = 0; 
			m_SystemDomain = null; 
			m_SystemBname = null; 
			m_SystemEname = null; 
			m_SystemCname = null; 
			m_SystemDescription = null; 
			m_Active = null; 
			m_Remark = null; 
			m_Site = null; 
			m_GlobalReviewer = null; 
			m_GlobalAdmin = null; 
			m_DocumentPath = null; 
			m_TypeInPortal = null; 
			m_SystemLink = null; 
			m_SitePortal = null;

            m_EnglishName = null;
            m_Extension = null;
            m_PmNo = null;
            m_Sequence = 0;
            //m_LeaderNo = null; 
           
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public string EnglishName
        {
            get { return m_EnglishName; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for EnglishName", value, value.ToString());

                m_IsChanged |= (m_EnglishName != value); m_EnglishName = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Extension
        {
            get { return m_Extension; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Extension", value, value.ToString());

                m_IsChanged |= (m_Extension != value); m_Extension = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PmNo
        {
            get { return m_PmNo; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for PmNo", value, value.ToString());

                m_IsChanged |= (m_PmNo != value); m_PmNo = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public int Sequence
        {
            get { return m_Sequence; }
            set { m_IsChanged |= (m_Sequence != value); m_Sequence = value; }
        }

        ///// <summary>
        ///// 
        ///// </summary>		
        //public string LeaderNo
        //{
        //    get { return m_LeaderNo; }
        //    set
        //    {
        //        if (value != null && value.Length > 30)
        //            throw new ArgumentOutOfRangeException("Invalid value for LeaderNo", value, value.ToString());

        //        m_IsChanged |= (m_LeaderNo != value); m_LeaderNo = value;
        //    }
        //}

		/// <summary>
		/// 
		/// </summary>		
		public int SystemId
		{
			get { return m_SystemId; }
			set { m_IsChanged |= (m_SystemId != value); m_SystemId = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemDomain
		{
			get { return m_SystemDomain; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SystemDomain", value, value.ToString());
				
				m_IsChanged |= (m_SystemDomain != value); m_SystemDomain = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemBname
		{
			get { return m_SystemBname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SystemBname", value, value.ToString());
				
				m_IsChanged |= (m_SystemBname != value); m_SystemBname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemEname
		{
			get { return m_SystemEname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SystemEname", value, value.ToString());
				
				m_IsChanged |= (m_SystemEname != value); m_SystemEname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemCname
		{
			get { return m_SystemCname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SystemCname", value, value.ToString());
				
				m_IsChanged |= (m_SystemCname != value); m_SystemCname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemDescription
		{
			get { return m_SystemDescription; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for SystemDescription", value, value.ToString());
				
				m_IsChanged |= (m_SystemDescription != value); m_SystemDescription = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Active
		{
			get { return m_Active; }
			set	
			{
				if( value!= null && value.Length > 4)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				m_IsChanged |= (m_Active != value); m_Active = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark
		{
			get { return m_Remark; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				m_IsChanged |= (m_Remark != value); m_Remark = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Site
		{
			get { return m_Site; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Site", value, value.ToString());
				
				m_IsChanged |= (m_Site != value); m_Site = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GlobalReviewer
		{
			get { return m_GlobalReviewer; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for GlobalReviewer", value, value.ToString());
				
				m_IsChanged |= (m_GlobalReviewer != value); m_GlobalReviewer = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string GlobalAdmin
		{
			get { return m_GlobalAdmin; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for GlobalAdmin", value, value.ToString());
				
				m_IsChanged |= (m_GlobalAdmin != value); m_GlobalAdmin = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DocumentPath
		{
			get { return m_DocumentPath; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for DocumentPath", value, value.ToString());
				
				m_IsChanged |= (m_DocumentPath != value); m_DocumentPath = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TypeInPortal
		{
			get { return m_TypeInPortal; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for TypeInPortal", value, value.ToString());
				
				m_IsChanged |= (m_TypeInPortal != value); m_TypeInPortal = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SystemLink
		{
			get { return m_SystemLink; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SystemLink", value, value.ToString());
				
				m_IsChanged |= (m_SystemLink != value); m_SystemLink = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SitePortal
		{
			get { return m_SitePortal; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SitePortal", value, value.ToString());
				
				m_IsChanged |= (m_SitePortal != value); m_SitePortal = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
