/***********************************************************
 ** File Name : BfBuginfo.cs
 ** Copyright (C) 2011 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Kite.Zhang
 ** Create Date : 2011-08-22
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class BfBuginfo
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_BugId; 
		private short m_ProjectId; 
		private string m_ProjectName; 
		private int m_Moduleid; 
		private string m_ModulePath; 
		private string m_BugTitle; 
		private byte m_BugSeverity; 
		private byte m_BugPriority; 
		private string m_BugType; 
		private string m_Bugos; 
		private string m_BugBrowser; 
		private string m_BugMachine; 
		private string m_HowFound; 
		private string m_ReproSteps; 
		private string m_BugStatus; 
		private string m_BugSubStatus; 
		private string m_Linkid; 
		private string m_Caseid; 
		private string m_Duplicateid; 
		private string m_MailTo; 
		private string m_OpenedBy; 
		private DateTime m_OpenedDate; 
		private string m_OpenedBuild; 
		private string m_AssignedTo; 
		private DateTime m_AssignedDate; 
		private string m_ResolvedBy; 
		private string m_Resolution; 
		private string m_ResolvedBuild; 
		private DateTime m_ResolvedDate; 
		private string m_ClosedBy; 
		private DateTime m_ClosedDate; 
		private string m_LastEditedBy; 
		private DateTime m_LastEditedDate; 
		private string m_ModifiedBy; 
		private string m_BugKeyword; 
		private int m_Resultid; 
		private string m_CustomField1; 
		private string m_CustomField2; 
		private string m_CustomField3; 
		private string m_IsDroped; 
		private string m_DutyBy; 
		private string m_Cause; 
		private string m_CauseAnalyze; 
		private string m_Strategy; 
		private string m_ReactiveBy;

	    private string m_CrId;
	    private string m_CrName;
	    private string m_Sd;
	    private string m_PmsId;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public BfBuginfo()
		{
			m_BugId = 0; 
			m_ProjectId = 0; 
			m_ProjectName = null; 
			m_Moduleid = 0; 
			m_ModulePath = null; 
			m_BugTitle = null; 
			m_BugSeverity = new byte(); 
			m_BugPriority = new byte(); 
			m_BugType = null; 
			m_Bugos = null; 
			m_BugBrowser = null; 
			m_BugMachine = null; 
			m_HowFound = null; 
			m_ReproSteps = null; 
			m_BugStatus = null; 
			m_BugSubStatus = null; 
			m_Linkid = null; 
			m_Caseid = null; 
			m_Duplicateid = null; 
			m_MailTo = null; 
			m_OpenedBy = null; 
			m_OpenedDate = new DateTime(); 
			m_OpenedBuild = null; 
			m_AssignedTo = null; 
			m_AssignedDate = new DateTime(); 
			m_ResolvedBy = null; 
			m_Resolution = null; 
			m_ResolvedBuild = null; 
			m_ResolvedDate = new DateTime(); 
			m_ClosedBy = null; 
			m_ClosedDate = new DateTime(); 
			m_LastEditedBy = null; 
			m_LastEditedDate = new DateTime(); 
			m_ModifiedBy = null; 
			m_BugKeyword = null; 
			m_Resultid = 0; 
			m_CustomField1 = null; 
			m_CustomField2 = null; 
			m_CustomField3 = null; 
			m_IsDroped = null; 
			m_DutyBy = null; 
			m_Cause = null; 
			m_CauseAnalyze = null; 
			m_Strategy = null; 
			m_ReactiveBy = null;

            m_CrId = null;
            m_CrName = null;
            m_Sd = null;
		    m_PmsId = null;

		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
        /// <summary>
        /// 
        /// </summary>		
        public string PmsId
        {
            get { return m_PmsId; }
            set { m_IsChanged |= (m_PmsId != value); m_PmsId = value; }
        }
       
        /// <summary>
        /// 
        /// </summary>		
        public string CrId
        {
            get { return m_CrId; }
            set { m_IsChanged |= (m_CrId != value); m_CrId = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CrName
        {
            get { return m_CrName; }
            set { m_IsChanged |= (m_CrName != value); m_CrName = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Sd
        {
            get { return m_Sd; }
            set { m_IsChanged |= (m_Sd != value); m_Sd = value; }
        }
        
        /// <summary>
		/// 
		/// </summary>		
		public int BugId
		{
			get { return m_BugId; }
			set { m_IsChanged |= (m_BugId != value); m_BugId = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public short ProjectId
		{
			get { return m_ProjectId; }
			set { m_IsChanged |= (m_ProjectId != value); m_ProjectId = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ProjectName
		{
			get { return m_ProjectName; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ProjectName", value, value.ToString());
				
				m_IsChanged |= (m_ProjectName != value); m_ProjectName = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int Moduleid
		{
			get { return m_Moduleid; }
			set { m_IsChanged |= (m_Moduleid != value); m_Moduleid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModulePath
		{
			get { return m_ModulePath; }
			set	
			{
				if( value!= null && value.Length > 240)
					throw new ArgumentOutOfRangeException("Invalid value for ModulePath", value, value.ToString());
				
				m_IsChanged |= (m_ModulePath != value); m_ModulePath = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugTitle
		{
			get { return m_BugTitle; }
			set	
			{
				if( value!= null && value.Length > 150)
					throw new ArgumentOutOfRangeException("Invalid value for BugTitle", value, value.ToString());
				
				m_IsChanged |= (m_BugTitle != value); m_BugTitle = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public byte BugSeverity
		{
			get { return m_BugSeverity; }
			set	
			{
				if( value.ToString().Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for BugSeverity", value, value.ToString());
				
				m_IsChanged |= (m_BugSeverity != value); m_BugSeverity = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>		
		public byte BugPriority
		{
			get { return m_BugPriority; }
			set	
			{
				if( value.ToString().Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for BugPriority", value, value.ToString());
				
				m_IsChanged |= (m_BugPriority != value); m_BugPriority = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugType
		{
			get { return m_BugType; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for BugType", value, value.ToString());
				
				m_IsChanged |= (m_BugType != value); m_BugType = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Bugos
		{
			get { return m_Bugos; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Bugos", value, value.ToString());
				
				m_IsChanged |= (m_Bugos != value); m_Bugos = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugBrowser
		{
			get { return m_BugBrowser; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for BugBrowser", value, value.ToString());
				
				m_IsChanged |= (m_BugBrowser != value); m_BugBrowser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugMachine
		{
			get { return m_BugMachine; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for BugMachine", value, value.ToString());
				
				m_IsChanged |= (m_BugMachine != value); m_BugMachine = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string HowFound
		{
			get { return m_HowFound; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HowFound", value, value.ToString());
				
				m_IsChanged |= (m_HowFound != value); m_HowFound = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ReproSteps
		{
			get { return m_ReproSteps; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for ReproSteps", value, value.ToString());
				
				m_IsChanged |= (m_ReproSteps != value); m_ReproSteps = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugStatus
		{
			get { return m_BugStatus; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for BugStatus", value, value.ToString());
				
				m_IsChanged |= (m_BugStatus != value); m_BugStatus = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugSubStatus
		{
			get { return m_BugSubStatus; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for BugSubStatus", value, value.ToString());
				
				m_IsChanged |= (m_BugSubStatus != value); m_BugSubStatus = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Linkid
		{
			get { return m_Linkid; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Linkid", value, value.ToString());
				
				m_IsChanged |= (m_Linkid != value); m_Linkid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Caseid
		{
			get { return m_Caseid; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Caseid", value, value.ToString());
				
				m_IsChanged |= (m_Caseid != value); m_Caseid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Duplicateid
		{
			get { return m_Duplicateid; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Duplicateid", value, value.ToString());
				
				m_IsChanged |= (m_Duplicateid != value); m_Duplicateid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MailTo
		{
			get { return m_MailTo; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for MailTo", value, value.ToString());
				
				m_IsChanged |= (m_MailTo != value); m_MailTo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OpenedBy
		{
			get { return m_OpenedBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for OpenedBy", value, value.ToString());
				
				m_IsChanged |= (m_OpenedBy != value); m_OpenedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime OpenedDate
		{
			get { return m_OpenedDate; }
			set { m_IsChanged |= (m_OpenedDate != value); m_OpenedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OpenedBuild
		{
			get { return m_OpenedBuild; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for OpenedBuild", value, value.ToString());
				
				m_IsChanged |= (m_OpenedBuild != value); m_OpenedBuild = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AssignedTo
		{
			get { return m_AssignedTo; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for AssignedTo", value, value.ToString());
				
				m_IsChanged |= (m_AssignedTo != value); m_AssignedTo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime AssignedDate
		{
			get { return m_AssignedDate; }
			set { m_IsChanged |= (m_AssignedDate != value); m_AssignedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResolvedBy
		{
			get { return m_ResolvedBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for ResolvedBy", value, value.ToString());
				
				m_IsChanged |= (m_ResolvedBy != value); m_ResolvedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Resolution
		{
			get { return m_Resolution; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Resolution", value, value.ToString());
				
				m_IsChanged |= (m_Resolution != value); m_Resolution = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ResolvedBuild
		{
			get { return m_ResolvedBuild; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for ResolvedBuild", value, value.ToString());
				
				m_IsChanged |= (m_ResolvedBuild != value); m_ResolvedBuild = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime ResolvedDate
		{
			get { return m_ResolvedDate; }
			set { m_IsChanged |= (m_ResolvedDate != value); m_ResolvedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ClosedBy
		{
			get { return m_ClosedBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for ClosedBy", value, value.ToString());
				
				m_IsChanged |= (m_ClosedBy != value); m_ClosedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime ClosedDate
		{
			get { return m_ClosedDate; }
			set { m_IsChanged |= (m_ClosedDate != value); m_ClosedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LastEditedBy
		{
			get { return m_LastEditedBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for LastEditedBy", value, value.ToString());
				
				m_IsChanged |= (m_LastEditedBy != value); m_LastEditedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime LastEditedDate
		{
			get { return m_LastEditedDate; }
			set { m_IsChanged |= (m_LastEditedDate != value); m_LastEditedDate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ModifiedBy
		{
			get { return m_ModifiedBy; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for ModifiedBy", value, value.ToString());
				
				m_IsChanged |= (m_ModifiedBy != value); m_ModifiedBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BugKeyword
		{
			get { return m_BugKeyword; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for BugKeyword", value, value.ToString());
				
				m_IsChanged |= (m_BugKeyword != value); m_BugKeyword = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public int Resultid
		{
			get { return m_Resultid; }
			set { m_IsChanged |= (m_Resultid != value); m_Resultid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomField1
		{
			get { return m_CustomField1; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for CustomField1", value, value.ToString());
				
				m_IsChanged |= (m_CustomField1 != value); m_CustomField1 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomField2
		{
			get { return m_CustomField2; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for CustomField2", value, value.ToString());
				
				m_IsChanged |= (m_CustomField2 != value); m_CustomField2 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CustomField3
		{
			get { return m_CustomField3; }
			set	
			{
				if( value!= null && value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for CustomField3", value, value.ToString());
				
				m_IsChanged |= (m_CustomField3 != value); m_CustomField3 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string IsDroped
		{
			get { return m_IsDroped; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for IsDroped", value, value.ToString());
				
				m_IsChanged |= (m_IsDroped != value); m_IsDroped = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DutyBy
		{
			get { return m_DutyBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for DutyBy", value, value.ToString());
				
				m_IsChanged |= (m_DutyBy != value); m_DutyBy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Cause
		{
			get { return m_Cause; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Cause", value, value.ToString());
				
				m_IsChanged |= (m_Cause != value); m_Cause = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CauseAnalyze
		{
			get { return m_CauseAnalyze; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for CauseAnalyze", value, value.ToString());
				
				m_IsChanged |= (m_CauseAnalyze != value); m_CauseAnalyze = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Strategy
		{
			get { return m_Strategy; }
			set	
			{
				if( value!= null && value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for Strategy", value, value.ToString());
				
				m_IsChanged |= (m_Strategy != value); m_Strategy = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ReactiveBy
		{
			get { return m_ReactiveBy; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for ReactiveBy", value, value.ToString());
				
				m_IsChanged |= (m_ReactiveBy != value); m_ReactiveBy = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
