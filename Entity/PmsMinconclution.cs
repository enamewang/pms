/***********************************************************
 ** File Name : PmsMinconclution.cs
 ** Copyright (C) 2012 Qisda Corporation. All rights reserved.
 **
 ** Creator : AIC01/Ename.Wang
 ** Create Date : 2012-04-09
 ** Modifier :
 ** Modify Date :
 **
 ** Description:
 **
 ***********************************************************/
using System;

namespace Qisda.PMS.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PmsMinconclution
	{
		#region Private Members
		private bool m_IsChanged;
		private bool m_IsDeleted;
		private int m_Serial; 
		private string m_Mnid; 
		private string m_Description; 
		private string m_Creator; 
		private DateTime m_CreateDate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PmsMinconclution()
		{
			m_Serial = 0; 
			m_Mnid = null; 
			m_Description = null; 
			m_Creator = null; 
			m_CreateDate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public int Serial
		{
			get { return m_Serial; }
			set { m_IsChanged |= (m_Serial != value); m_Serial = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Mnid
		{
			get { return m_Mnid; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for Mnid", value, value.ToString());
				
				m_IsChanged |= (m_Mnid != value); m_Mnid = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get { return m_Description; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				m_IsChanged |= (m_Description != value); m_Description = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Creator
		{
			get { return m_Creator; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Creator", value, value.ToString());
				
				m_IsChanged |= (m_Creator != value); m_Creator = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateDate
		{
			get { return m_CreateDate; }
			set { m_IsChanged |= (m_CreateDate != value); m_CreateDate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_IsChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return m_IsDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			m_IsDeleted = true;
			m_IsChanged = true;
		}
		
		#endregion
		
		
	}
}
